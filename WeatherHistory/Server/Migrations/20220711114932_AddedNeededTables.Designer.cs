// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherHistory.Server.Data;

#nullable disable

namespace WeatherHistory.Server.Migrations
{
    [DbContext(typeof(WeatherDbContext))]
    [Migration("20220711114932_AddedNeededTables")]
    partial class AddedNeededTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WeatherHistory.Server.Models.Location", b =>
                {
                    b.Property<int>("IdLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocation"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IdLocation");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WeatherHistory.Server.Models.Temperature", b =>
                {
                    b.Property<int>("IdTemperature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTemperature"), 1L, 1);

                    b.Property<double>("FeelsLike")
                        .HasColumnType("float");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<int>("IdLocation")
                        .HasColumnType("int");

                    b.Property<int>("IdWeather")
                        .HasColumnType("int");

                    b.Property<double>("Pressure")
                        .HasColumnType("float");

                    b.Property<double>("Temp")
                        .HasColumnType("float");

                    b.Property<double>("TempMax")
                        .HasColumnType("float");

                    b.Property<double>("TempMin")
                        .HasColumnType("float");

                    b.HasKey("IdTemperature");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdWeather");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("WeatherHistory.Server.Models.Weather", b =>
                {
                    b.Property<int>("IdWeather")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWeather"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("IdWeather");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("WeatherHistory.Server.Models.Temperature", b =>
                {
                    b.HasOne("WeatherHistory.Server.Models.Location", "Location")
                        .WithMany("Temperatures")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherHistory.Server.Models.Weather", "Weather")
                        .WithMany("Temperatures")
                        .HasForeignKey("IdWeather")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Weather");
                });

            modelBuilder.Entity("WeatherHistory.Server.Models.Location", b =>
                {
                    b.Navigation("Temperatures");
                });

            modelBuilder.Entity("WeatherHistory.Server.Models.Weather", b =>
                {
                    b.Navigation("Temperatures");
                });
#pragma warning restore 612, 618
        }
    }
}
